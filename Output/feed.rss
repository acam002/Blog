<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Alberto Camacho</title><description>Software Engineer</description><link>https://www.acamacho.dev</link><language>en</language><lastBuildDate>Thu, 21 May 2020 04:53:42 -0400</lastBuildDate><pubDate>Thu, 21 May 2020 04:53:42 -0400</pubDate><ttl>250</ttl><atom:link href="https://www.acamacho.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://www.acamacho.dev/posts/2020-02-11-ui-kit</guid><title>Learn how to quickly configure programmatic UIKit in XCode 11</title><description>How to setup Programmatic UI in XCode 11</description><link>https://www.acamacho.dev/posts/2020-02-11-ui-kit</link><pubDate>Sat, 1 Feb 2020 00:48:00 -0500</pubDate><content:encoded><![CDATA[<h1>Learn how to quickly configure programmatic UIKit in XCode 11</h1><p>As a beginner iOS developer, I wanted to learn how to do programmatic UIKit since it would help understand Apple's framework at a deeper level. One of my friends told me once I learned programmatic UIKit, Storyboards would come very easy to me.</p><p>But late last year, Storyboard projects now have a SceneDelegate and an AppDelegate. I had no idea what any of these meant and I was used to the AppDelegate class from previous versions of Xcode. I did some digging since I started a new project with Xcode 11 and I had deadlines to deal with. This is what I found.</p><p>Storyboard projects now have a SceneDelegate responsible for what is on the screen at any given moment and an AppDelegate which takes care of the application's lifecycle hooks.</p><h1>The Project Configurations</h1><p>I am going to assume you have a new project loaded up on Xcode and selected Storyboard as the User Interface.</p><ol><li>Delete <code>Main.storyboard</code> in the project navigator.</li></ol><ol start="2"><li>Go to the general settings of your app in the Deployment Info section, clear out the text in the Main Interface. The text should contain 'Main'.</li></ol><ol start="3"><li>Go to <code>info.plist</code> and search for the property called Storyboard Name which should also contain the text 'Main'. Press the minus sign next to the property name and that will remove the reference to <code>Main.storyboard</code> that we deleted in step 1.</li></ol><p>With that, we are done with project configurations. Time to move to our code changes.</p><h1>The Code Configuration</h1><p>Let's take a look at the following code snippet located in <code>SceneDelegate.swift</code>. This is where we will be hooking up our custom <code>RootController</code>.</p><pre><code><span class="keyword">func</span> scene(<span class="keyword">_</span> scene: <span class="type">UIScene</span>, willConnectTo session: <span class="type">UISceneSession</span>, options connectionOptions: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) {
    <span class="comment">// Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
    // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
    // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).</span>
    <span class="keyword">guard let</span> _ = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
}
</code></pre><p>The comments inside this code block gives us some nice direction.</p><ol><li>Remove the contents of <code>scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> .</li></ol><ol start="2"><li>Paste the following code:</li></ol><pre><code><span class="keyword">guard let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
window = <span class="type">UIWindow</span>(frame: windowScene.<span class="property">coordinateSpace</span>.<span class="property">bounds</span>)
window?.<span class="property">windowScene</span> = windowScene
window?.<span class="property">rootViewController</span> = <span class="type">ViewController</span>()
window?.<span class="call">makeKeyAndVisible</span>()
</code></pre><p>Where <code>ViewController()</code> is an instance of your ViewController class included in the project.</p><h1>Testing</h1><p>To finally verify that our changes were successful we can change the background color of the <code>ViewController</code> :</p><pre><code><span class="keyword">override func</span> viewDidLoad() {
   <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
   <span class="comment">// Do any additional setup after loading the view.</span>
   view.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemBlue</span>
}
</code></pre><p>Upon running the app we should see a blank view with a blue color.</p><p>[Photos will be added soon]</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.acamacho.dev/posts/2020-02-12-ui-kit%20copy</guid><title>My Third Blog Post of the Year</title><description>How to setup Programmatic UI in XCode 11</description><link>https://www.acamacho.dev/posts/2020-02-12-ui-kit%20copy</link><pubDate>Sat, 1 Feb 2020 00:48:00 -0500</pubDate><content:encoded><![CDATA[<h1>My Third Blog Post of the Year</h1><p>As a beginner iOS developer, I wanted to learn how to do programmatic UIKit since it would help understand Apple's framework at a deeper level. One of my friends told me once I learned programmatic UIKit, Storyboards would come very easy to me.</p><p>But late last year, Storyboard projects now have a SceneDelegate and an AppDelegate. I had no idea what any of these meant and I was used to the AppDelegate class from previous versions of Xcode. I did some digging since I started a new project with Xcode 11 and I had deadlines to deal with. This is what I found.</p><p>Storyboard projects now have a SceneDelegate responsible for what is on the screen at any given moment and an AppDelegate which takes care of the application's lifecycle hooks.</p><h1>The Project Configurations</h1><p>I am going to assume you have a new project loaded up on Xcode and selected Storyboard as the User Interface.</p><ol><li>Delete <code>Main.storyboard</code> in the project navigator.</li></ol><ol start="2"><li>Go to the general settings of your app in the Deployment Info section, clear out the text in the Main Interface. The text should contain 'Main'.</li></ol><ol start="3"><li>Go to <code>info.plist</code> and search for the property called Storyboard Name which should also contain the text 'Main'. Press the minus sign next to the property name and that will remove the reference to <code>Main.storyboard</code> that we deleted in step 1.</li></ol><p>With that, we are done with project configurations. Time to move to our code changes.</p><h1>The Code Configuration</h1><p>Let's take a look at the following code snippet located in <code>SceneDelegate.swift</code>. This is where we will be hooking up our custom <code>RootController</code>.</p><pre><code><span class="keyword">func</span> scene(<span class="keyword">_</span> scene: <span class="type">UIScene</span>, willConnectTo session: <span class="type">UISceneSession</span>, options connectionOptions: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) {
    <span class="comment">// Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
    // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
    // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).</span>
    <span class="keyword">guard let</span> _ = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
}
</code></pre><p>The comments inside this code block gives us some nice direction.</p><ol><li>Remove the contents of <code>scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> .</li></ol><ol start="2"><li>Paste the following code:</li></ol><pre><code><span class="keyword">guard let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
window = <span class="type">UIWindow</span>(frame: windowScene.<span class="property">coordinateSpace</span>.<span class="property">bounds</span>)
window?.<span class="property">windowScene</span> = windowScene
window?.<span class="property">rootViewController</span> = <span class="type">ViewController</span>()
window?.<span class="call">makeKeyAndVisible</span>()
</code></pre><p>Where <code>ViewController()</code> is an instance of your ViewController class included in the project.</p><h1>Testing</h1><p>To finally verify that our changes were successful we can change the background color of the <code>ViewController</code> :</p><pre><code><span class="keyword">override func</span> viewDidLoad() {
   <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
   <span class="comment">// Do any additional setup after loading the view.</span>
   view.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemBlue</span>
}
</code></pre><p>Upon running the app we should see a blank view with a blue color.</p><p>[Photos will be added soon]</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.acamacho.dev/posts/2020-02-13-ui-kit%20copy%202</guid><title>Build a Responsive Backend Service for Multiple Users</title><description>How to setup Programmatic UI in XCode 11</description><link>https://www.acamacho.dev/posts/2020-02-13-ui-kit%20copy%202</link><pubDate>Sat, 1 Feb 2020 00:48:00 -0500</pubDate><content:encoded><![CDATA[<h1>Build a Responsive Backend Service for Multiple Users</h1><p>As a beginner iOS developer, I wanted to learn how to do programmatic UIKit since it would help understand Apple's framework at a deeper level. One of my friends told me once I learned programmatic UIKit, Storyboards would come very easy to me.</p><p>But late last year, Storyboard projects now have a SceneDelegate and an AppDelegate. I had no idea what any of these meant and I was used to the AppDelegate class from previous versions of Xcode. I did some digging since I started a new project with Xcode 11 and I had deadlines to deal with. This is what I found.</p><p>Storyboard projects now have a SceneDelegate responsible for what is on the screen at any given moment and an AppDelegate which takes care of the application's lifecycle hooks.</p><h1>The Project Configurations</h1><p>I am going to assume you have a new project loaded up on Xcode and selected Storyboard as the User Interface.</p><ol><li>Delete <code>Main.storyboard</code> in the project navigator.</li></ol><ol start="2"><li>Go to the general settings of your app in the Deployment Info section, clear out the text in the Main Interface. The text should contain 'Main'.</li></ol><ol start="3"><li>Go to <code>info.plist</code> and search for the property called Storyboard Name which should also contain the text 'Main'. Press the minus sign next to the property name and that will remove the reference to <code>Main.storyboard</code> that we deleted in step 1.</li></ol><p>With that, we are done with project configurations. Time to move to our code changes.</p><h1>The Code Configuration</h1><p>Let's take a look at the following code snippet located in <code>SceneDelegate.swift</code>. This is where we will be hooking up our custom <code>RootController</code>.</p><pre><code><span class="keyword">func</span> scene(<span class="keyword">_</span> scene: <span class="type">UIScene</span>, willConnectTo session: <span class="type">UISceneSession</span>, options connectionOptions: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) {
    <span class="comment">// Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
    // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
    // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).</span>
    <span class="keyword">guard let</span> _ = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
}
</code></pre><p>The comments inside this code block gives us some nice direction.</p><ol><li>Remove the contents of <code>scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> .</li></ol><ol start="2"><li>Paste the following code:</li></ol><pre><code><span class="keyword">guard let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
window = <span class="type">UIWindow</span>(frame: windowScene.<span class="property">coordinateSpace</span>.<span class="property">bounds</span>)
window?.<span class="property">windowScene</span> = windowScene
window?.<span class="property">rootViewController</span> = <span class="type">ViewController</span>()
window?.<span class="call">makeKeyAndVisible</span>()
</code></pre><p>Where <code>ViewController()</code> is an instance of your ViewController class included in the project.</p><h1>Testing</h1><p>To finally verify that our changes were successful we can change the background color of the <code>ViewController</code> :</p><pre><code><span class="keyword">override func</span> viewDidLoad() {
   <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
   <span class="comment">// Do any additional setup after loading the view.</span>
   view.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemBlue</span>
}
</code></pre><p>Upon running the app we should see a blank view with a blue color.</p><p>[Photos will be added soon]</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.acamacho.dev/posts/2020-02-14-ui-kit%20copy%203</guid><title>How Did We Get Here?</title><description>How to setup Programmatic UI in XCode 11</description><link>https://www.acamacho.dev/posts/2020-02-14-ui-kit%20copy%203</link><pubDate>Sat, 1 Feb 2020 00:48:00 -0500</pubDate><content:encoded><![CDATA[<h1>How Did We Get Here?</h1><p>As a beginner iOS developer, I wanted to learn how to do programmatic UIKit since it would help understand Apple's framework at a deeper level. One of my friends told me once I learned programmatic UIKit, Storyboards would come very easy to me.</p><p>But late last year, Storyboard projects now have a SceneDelegate and an AppDelegate. I had no idea what any of these meant and I was used to the AppDelegate class from previous versions of Xcode. I did some digging since I started a new project with Xcode 11 and I had deadlines to deal with. This is what I found.</p><p>Storyboard projects now have a SceneDelegate responsible for what is on the screen at any given moment and an AppDelegate which takes care of the application's lifecycle hooks.</p><h1>The Project Configurations</h1><p>I am going to assume you have a new project loaded up on Xcode and selected Storyboard as the User Interface.</p><ol><li>Delete <code>Main.storyboard</code> in the project navigator.</li></ol><ol start="2"><li>Go to the general settings of your app in the Deployment Info section, clear out the text in the Main Interface. The text should contain 'Main'.</li></ol><ol start="3"><li>Go to <code>info.plist</code> and search for the property called Storyboard Name which should also contain the text 'Main'. Press the minus sign next to the property name and that will remove the reference to <code>Main.storyboard</code> that we deleted in step 1.</li></ol><p>With that, we are done with project configurations. Time to move to our code changes.</p><h1>The Code Configuration</h1><p>Let's take a look at the following code snippet located in <code>SceneDelegate.swift</code>. This is where we will be hooking up our custom <code>RootController</code>.</p><pre><code><span class="keyword">func</span> scene(<span class="keyword">_</span> scene: <span class="type">UIScene</span>, willConnectTo session: <span class="type">UISceneSession</span>, options connectionOptions: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) {
    <span class="comment">// Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
    // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
    // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).</span>
    <span class="keyword">guard let</span> _ = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
}
</code></pre><p>The comments inside this code block gives us some nice direction.</p><ol><li>Remove the contents of <code>scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> .</li></ol><ol start="2"><li>Paste the following code:</li></ol><pre><code><span class="keyword">guard let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
window = <span class="type">UIWindow</span>(frame: windowScene.<span class="property">coordinateSpace</span>.<span class="property">bounds</span>)
window?.<span class="property">windowScene</span> = windowScene
window?.<span class="property">rootViewController</span> = <span class="type">ViewController</span>()
window?.<span class="call">makeKeyAndVisible</span>()
</code></pre><p>Where <code>ViewController()</code> is an instance of your ViewController class included in the project.</p><h1>Testing</h1><p>To finally verify that our changes were successful we can change the background color of the <code>ViewController</code> :</p><pre><code><span class="keyword">override func</span> viewDidLoad() {
   <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
   <span class="comment">// Do any additional setup after loading the view.</span>
   view.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemBlue</span>
}
</code></pre><p>Upon running the app we should see a blank view with a blue color.</p><p>[Photos will be added soon]</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.acamacho.dev/angular/ang</guid><title>My Third Blog Post of the Year</title><description>How to setup Programmatic UI in XCode 11</description><link>https://www.acamacho.dev/angular/ang</link><pubDate>Sat, 1 Feb 2020 00:48:00 -0500</pubDate><content:encoded><![CDATA[<h1>My Third Blog Post of the Year</h1><p>As a beginner iOS developer, I wanted to learn how to do programmatic UIKit since it would help understand Apple's framework at a deeper level. One of my friends told me once I learned programmatic UIKit, Storyboards would come very easy to me.</p><p>But late last year, Storyboard projects now have a SceneDelegate and an AppDelegate. I had no idea what any of these meant and I was used to the AppDelegate class from previous versions of Xcode. I did some digging since I started a new project with Xcode 11 and I had deadlines to deal with. This is what I found.</p><p>Storyboard projects now have a SceneDelegate responsible for what is on the screen at any given moment and an AppDelegate which takes care of the application's lifecycle hooks.</p><h1>The Project Configurations</h1><p>I am going to assume you have a new project loaded up on Xcode and selected Storyboard as the User Interface.</p><ol><li>Delete <code>Main.storyboard</code> in the project navigator.</li></ol><ol start="2"><li>Go to the general settings of your app in the Deployment Info section, clear out the text in the Main Interface. The text should contain 'Main'.</li></ol><ol start="3"><li>Go to <code>info.plist</code> and search for the property called Storyboard Name which should also contain the text 'Main'. Press the minus sign next to the property name and that will remove the reference to <code>Main.storyboard</code> that we deleted in step 1.</li></ol><p>With that, we are done with project configurations. Time to move to our code changes.</p><h1>The Code Configuration</h1><p>Let's take a look at the following code snippet located in <code>SceneDelegate.swift</code>. This is where we will be hooking up our custom <code>RootController</code>.</p><pre><code><span class="keyword">func</span> scene(<span class="keyword">_</span> scene: <span class="type">UIScene</span>, willConnectTo session: <span class="type">UISceneSession</span>, options connectionOptions: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) {
    <span class="comment">// Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
    // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
    // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).</span>
    <span class="keyword">guard let</span> _ = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
}
</code></pre><p>The comments inside this code block gives us some nice direction.</p><ol><li>Remove the contents of <code>scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> .</li></ol><ol start="2"><li>Paste the following code:</li></ol><pre><code><span class="keyword">guard let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
window = <span class="type">UIWindow</span>(frame: windowScene.<span class="property">coordinateSpace</span>.<span class="property">bounds</span>)
window?.<span class="property">windowScene</span> = windowScene
window?.<span class="property">rootViewController</span> = <span class="type">ViewController</span>()
window?.<span class="call">makeKeyAndVisible</span>()
</code></pre><p>Where <code>ViewController()</code> is an instance of your ViewController class included in the project.</p><h1>Testing</h1><p>To finally verify that our changes were successful we can change the background color of the <code>ViewController</code> :</p><pre><code><span class="keyword">override func</span> viewDidLoad() {
   <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
   <span class="comment">// Do any additional setup after loading the view.</span>
   view.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemBlue</span>
}
</code></pre><p>Upon running the app we should see a blank view with a blue color.</p><p>[Photos will be added soon]</p>]]></content:encoded></item></channel></rss>