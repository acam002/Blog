<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Alberto Camacho</title><description>Software Engineer</description><link>https://www.acamacho.dev</link><language>en</language><lastBuildDate>Mon, 25 May 2020 20:03:53 -0400</lastBuildDate><pubDate>Mon, 25 May 2020 20:03:53 -0400</pubDate><ttl>250</ttl><atom:link href="https://www.acamacho.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://www.acamacho.dev/posts/2020-05-25-publish</guid><title>Using Publish to Build Your Own Blog Website (Series)</title><description>Using Publish to Build Your Own Blog Website</description><link>https://www.acamacho.dev/posts/2020-05-25-publish</link><pubDate>Mon, 25 May 2020 18:00:00 -0400</pubDate><content:encoded><![CDATA[<h1>Using Publish to Build Your Own Blog Website (Series)</h1><p>So as you may know, I have been in the software industry for about three years now and I have gotten a lot of experience with different technologies. Most of them being for web development and back end servers. Being proficient in JavaScript and Java has been a by product of that time in the field.</p><p>Things can get tiresome when you are using the same language over and over again and I was wondering if there was something else out there I can take up as a hobby while my work provided me the usual features. My friend Gio Noa pointed me to John Sundell's Publish framework which was open sourced late last year.</p><p>Publish uses Swift for website development, which was very surprising to me as almost everything I've seen in web has been JavaScript or PHP. I decided to take a look and see what the fuss was about. I was pleasantly surprised. This is something anyone familiar with Swift, CSS, and HTML can do. This website you're currently on was made with Publish!</p><p>This post will take you through the installation of Publish and show you how to get a local server running. Consider this post as a series which will get you closer and closer to getting a functional blogging website.</p><h1>Installing Publish</h1><p>Installing Publish is an easy affair on the command line. Here are the steps to do so:</p><pre><code>$ git clone https://github.<span class="property">com</span>/<span class="type">JohnSundell</span>/<span class="type">Publish</span>.<span class="property">git</span>
$ cd <span class="type">Publish</span>
$ make
</code></pre><p>These three commands will install Publish into your <code>/usr/local/bin</code> directory.</p><p>Run these next commands (Do not do this in the Publish directory) to create a new Publish project:</p><pre><code>$ mkdir <span class="type">MyWebsite</span>
$ cd <span class="type">MyWebsite</span>
$ publish new
</code></pre><p>This will produce a Publish project which will do the basic scaffolding of your website. MyWebsite can be a name you choose. Do NOT use Site or Website as these are types used in Publish.</p><p>Let's take a look at our new website! It can be done with the following command;</p><pre><code>$ publish run
</code></pre><p>You get a local server running on localhost:8000, open up your browser for choice and enter localhost:8080 into your URL bar.</p><p>You should have a basic website in a dark mode theme. Your new website is up and running! The next blog post will discuss the scaffolding of this new website.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.acamacho.dev/posts/2020-02-11-ui-kit</guid><title>Learn how to quickly configure programmatic UIKit in XCode 11</title><description>How to setup Programmatic UI in XCode 11</description><link>https://www.acamacho.dev/posts/2020-02-11-ui-kit</link><pubDate>Sat, 1 Feb 2020 00:48:00 -0500</pubDate><content:encoded><![CDATA[<h1>Learn how to quickly configure programmatic UIKit in XCode 11</h1><p>As a beginner iOS developer, I wanted to learn how to do programmatic UIKit since it would help understand Apple's framework at a deeper level. One of my friends told me once I learned programmatic UIKit, Storyboards would come very easy to me.</p><p>But late last year, Storyboard projects now have a SceneDelegate and an AppDelegate. I had no idea what any of these meant and I was used to the AppDelegate class from previous versions of Xcode. I did some digging since I started a new project with Xcode 11 and I had deadlines to deal with. This is what I found.</p><p>Storyboard projects now have a SceneDelegate responsible for what is on the screen at any given moment and an AppDelegate which takes care of the application's lifecycle hooks.</p><h1>The Project Configurations</h1><p>I am going to assume you have a new project loaded up on Xcode and selected Storyboard as the User Interface.</p><ol><li>Delete <code>Main.storyboard</code> in the project navigator.</li></ol><ol start="2"><li>Go to the general settings of your app in the Deployment Info section, clear out the text in the Main Interface. The text should contain 'Main'.</li></ol><ol start="3"><li>Go to <code>info.plist</code> and search for the property called Storyboard Name which should also contain the text 'Main'. Press the minus sign next to the property name and that will remove the reference to <code>Main.storyboard</code> that we deleted in step 1.</li></ol><p>With that, we are done with project configurations. Time to move to our code changes.</p><h1>The Code Configuration</h1><p>Let's take a look at the following code snippet located in <code>SceneDelegate.swift</code>. This is where we will be hooking up our custom <code>RootController</code>.</p><pre><code><span class="keyword">func</span> scene(<span class="keyword">_</span> scene: <span class="type">UIScene</span>, willConnectTo session: <span class="type">UISceneSession</span>, options connectionOptions: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) {
    <span class="comment">// Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
    // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
    // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).</span>
    <span class="keyword">guard let</span> _ = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
}
</code></pre><p>The comments inside this code block gives us some nice direction.</p><ol><li>Remove the contents of <code>scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> .</li></ol><ol start="2"><li>Paste the following code:</li></ol><pre><code><span class="keyword">guard let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
window = <span class="type">UIWindow</span>(frame: windowScene.<span class="property">coordinateSpace</span>.<span class="property">bounds</span>)
window?.<span class="property">windowScene</span> = windowScene
window?.<span class="property">rootViewController</span> = <span class="type">ViewController</span>()
window?.<span class="call">makeKeyAndVisible</span>()
</code></pre><p>Where <code>ViewController()</code> is an instance of your ViewController class included in the project.</p><h1>Testing</h1><p>To finally verify that our changes were successful we can change the background color of the <code>ViewController</code> :</p><pre><code><span class="keyword">override func</span> viewDidLoad() {
   <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
   <span class="comment">// Do any additional setup after loading the view.</span>
   view.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemBlue</span>
}
</code></pre><p>Upon running the app we should see a blank view with a blue color.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.acamacho.dev/posts/2020-02-13-ui-kit%20copy%202</guid><title>Build a Responsive Backend Service for Multiple Users</title><description>How to setup Programmatic UI in XCode 11</description><link>https://www.acamacho.dev/posts/2020-02-13-ui-kit%20copy%202</link><pubDate>Sat, 1 Feb 2020 00:48:00 -0500</pubDate><content:encoded><![CDATA[<h1>Build a Responsive Backend Service for Multiple Users</h1><p>As a beginner iOS developer, I wanted to learn how to do programmatic UIKit since it would help understand Apple's framework at a deeper level. One of my friends told me once I learned programmatic UIKit, Storyboards would come very easy to me.</p><p>But late last year, Storyboard projects now have a SceneDelegate and an AppDelegate. I had no idea what any of these meant and I was used to the AppDelegate class from previous versions of Xcode. I did some digging since I started a new project with Xcode 11 and I had deadlines to deal with. This is what I found.</p><p>Storyboard projects now have a SceneDelegate responsible for what is on the screen at any given moment and an AppDelegate which takes care of the application's lifecycle hooks.</p><h1>The Project Configurations</h1><p>I am going to assume you have a new project loaded up on Xcode and selected Storyboard as the User Interface.</p><ol><li>Delete <code>Main.storyboard</code> in the project navigator.</li></ol><ol start="2"><li>Go to the general settings of your app in the Deployment Info section, clear out the text in the Main Interface. The text should contain 'Main'.</li></ol><ol start="3"><li>Go to <code>info.plist</code> and search for the property called Storyboard Name which should also contain the text 'Main'. Press the minus sign next to the property name and that will remove the reference to <code>Main.storyboard</code> that we deleted in step 1.</li></ol><p>With that, we are done with project configurations. Time to move to our code changes.</p><h1>The Code Configuration</h1><p>Let's take a look at the following code snippet located in <code>SceneDelegate.swift</code>. This is where we will be hooking up our custom <code>RootController</code>.</p><pre><code><span class="keyword">func</span> scene(<span class="keyword">_</span> scene: <span class="type">UIScene</span>, willConnectTo session: <span class="type">UISceneSession</span>, options connectionOptions: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) {
    <span class="comment">// Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
    // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
    // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).</span>
    <span class="keyword">guard let</span> _ = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
}
</code></pre><p>The comments inside this code block gives us some nice direction.</p><ol><li>Remove the contents of <code>scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> .</li></ol><ol start="2"><li>Paste the following code:</li></ol><pre><code><span class="keyword">guard let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
window = <span class="type">UIWindow</span>(frame: windowScene.<span class="property">coordinateSpace</span>.<span class="property">bounds</span>)
window?.<span class="property">windowScene</span> = windowScene
window?.<span class="property">rootViewController</span> = <span class="type">ViewController</span>()
window?.<span class="call">makeKeyAndVisible</span>()
</code></pre><p>Where <code>ViewController()</code> is an instance of your ViewController class included in the project.</p><h1>Testing</h1><p>To finally verify that our changes were successful we can change the background color of the <code>ViewController</code> :</p><pre><code><span class="keyword">override func</span> viewDidLoad() {
   <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
   <span class="comment">// Do any additional setup after loading the view.</span>
   view.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemBlue</span>
}
</code></pre><p>Upon running the app we should see a blank view with a blue color.</p><p>[Photos will be added soon]</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.acamacho.dev/posts/2020-02-14-ui-kit%20copy%203</guid><title>How Did We Get Here?</title><description>How to setup Programmatic UI in XCode 11</description><link>https://www.acamacho.dev/posts/2020-02-14-ui-kit%20copy%203</link><pubDate>Sat, 1 Feb 2020 00:48:00 -0500</pubDate><content:encoded><![CDATA[<h1>How Did We Get Here?</h1><p>As a beginner iOS developer, I wanted to learn how to do programmatic UIKit since it would help understand Apple's framework at a deeper level. One of my friends told me once I learned programmatic UIKit, Storyboards would come very easy to me.</p><p>But late last year, Storyboard projects now have a SceneDelegate and an AppDelegate. I had no idea what any of these meant and I was used to the AppDelegate class from previous versions of Xcode. I did some digging since I started a new project with Xcode 11 and I had deadlines to deal with. This is what I found.</p><p>Storyboard projects now have a SceneDelegate responsible for what is on the screen at any given moment and an AppDelegate which takes care of the application's lifecycle hooks.</p><h1>The Project Configurations</h1><p>I am going to assume you have a new project loaded up on Xcode and selected Storyboard as the User Interface.</p><ol><li>Delete <code>Main.storyboard</code> in the project navigator.</li></ol><ol start="2"><li>Go to the general settings of your app in the Deployment Info section, clear out the text in the Main Interface. The text should contain 'Main'.</li></ol><ol start="3"><li>Go to <code>info.plist</code> and search for the property called Storyboard Name which should also contain the text 'Main'. Press the minus sign next to the property name and that will remove the reference to <code>Main.storyboard</code> that we deleted in step 1.</li></ol><p>With that, we are done with project configurations. Time to move to our code changes.</p><h1>The Code Configuration</h1><p>Let's take a look at the following code snippet located in <code>SceneDelegate.swift</code>. This is where we will be hooking up our custom <code>RootController</code>.</p><pre><code><span class="keyword">func</span> scene(<span class="keyword">_</span> scene: <span class="type">UIScene</span>, willConnectTo session: <span class="type">UISceneSession</span>, options connectionOptions: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) {
    <span class="comment">// Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
    // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
    // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).</span>
    <span class="keyword">guard let</span> _ = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
}
</code></pre><p>The comments inside this code block gives us some nice direction.</p><ol><li>Remove the contents of <code>scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> .</li></ol><ol start="2"><li>Paste the following code:</li></ol><pre><code><span class="keyword">guard let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
window = <span class="type">UIWindow</span>(frame: windowScene.<span class="property">coordinateSpace</span>.<span class="property">bounds</span>)
window?.<span class="property">windowScene</span> = windowScene
window?.<span class="property">rootViewController</span> = <span class="type">ViewController</span>()
window?.<span class="call">makeKeyAndVisible</span>()
</code></pre><p>Where <code>ViewController()</code> is an instance of your ViewController class included in the project.</p><h1>Testing</h1><p>To finally verify that our changes were successful we can change the background color of the <code>ViewController</code> :</p><pre><code><span class="keyword">override func</span> viewDidLoad() {
   <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
   <span class="comment">// Do any additional setup after loading the view.</span>
   view.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemBlue</span>
}
</code></pre><p>Upon running the app we should see a blank view with a blue color.</p><p>[Photos will be added soon]</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.acamacho.dev/posts/File</guid><title>Swift Miami</title><description>Welcome to Swift Miami</description><link>https://www.acamacho.dev/posts/File</link><pubDate>Sat, 1 Feb 2020 00:48:00 -0500</pubDate><content:encoded><![CDATA[<h1>Swift Miami</h1>]]></content:encoded></item></channel></rss>