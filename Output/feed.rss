<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Alberto Camacho</title><description>Software Engineer</description><link>https://www.acamacho.dev</link><language>en</language><lastBuildDate>Tue, 26 May 2020 21:13:41 -0400</lastBuildDate><pubDate>Tue, 26 May 2020 21:13:41 -0400</pubDate><ttl>250</ttl><atom:link href="https://www.acamacho.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://www.acamacho.dev/posts/2020-02-14-experience</guid><title>What Time in the Software Engineering Industry has Taught Me</title><description>How to setup Programmatic UI in XCode 11</description><link>https://www.acamacho.dev/posts/2020-02-14-experience</link><pubDate>Tue, 26 May 2020 20:28:00 -0400</pubDate><content:encoded><![CDATA[<h1>What Time in the Software Engineering Industry has Taught Me</h1><p>I would be lying if I told you once you graduated from your IT related college program, it would be smooth sailing. It's far from it, it's a challenging but rewarding experience. Your salary can be amazing and you are able to afford new things such as cars, computers, gifts for your loved ones, and even a home. But something that will never change in this field is that you will always be learning. Just because you finished your degree, doesn't mean that your learning is done. Here is my story thus far.</p><h1>Graduation</h1><p>In late 2017, I graduated from Florida International University. I was pumped to be done with my degree and eager to begin my new career as a software developer. After graduating I started to look online for job opportunies and started to realize that my degree and my only internship at StateFarm was not enough to easily find employment. Sure, I had a great GPA and thought that would be the most important thing to any recruiter. But I was wrong, The degree I received from FIU was only the tip of the iceberg for knowing what it means to be a competent engineer.</p><h1>The Job Search</h1><p>After about 2 months of searching, I found a company that was willing to take a chance on me after your standard software developer interview (I had connection also vouch for me). It was an insurance company in Sunrise, Florida. February 19th, 2018 would be my first day on the job and I was ready to go. At the same time I was nervous because the job description and requirements were mostly unfamiliar to me. I didn't know what exactly a ReST API was, or how to use SOAPUI, my SQL skills were also very rusty since I hadn't written SQL in almost a year and a half.</p><h1>Starting Out at My First Job</h1><p>The commute about 45 minutes one way. It sucked; I'll admit but I finally had my foot in the door. All I needed to do was impress so I set myself some very high expectations. I would learn that those expectations were very unrealistic.</p><p>For those of you starting out in software, a junior level engineer is more of a learning position. You are not expected to know everything that they throw at you, but at the same time they don't want to see you slacking off. After all, you are learning on their time. After a few weeks of being at my new position, I was very nervous and thought I would be let go for performance reasons. All because of these high expectations and not knowing what a junior position really is about. I was given a task and if I had any questions to ask that it would be ok to do so.</p><p>After asking a few questions to a more seasoned developer, I would feel bad for asking them so many questions. This is ok ladies and gentlemen, it's only an issue when you start to ask the same questions over and over. When I stopped asking questions, that's when my progress would completely stall. You can't feel bad for asking questions, software engineering is performed as a team almost anywhere. If you can't rely on your team, then do you really want to work there?</p><p>I realized that a software engineering position wasn't only about coding, but rather understanding the business context in which you are developing for. In my case, I had to learn a lot about home insurance to be effective in pumping my assigned features in any given release.</p><h1>A Year Later</h1><p>A year would pass and one day in 2019 I took a look at the proverbial mirror and realized just how much I had learned. You don't realize how much you know until you take a good look back at yourself. I had learned how to use the Spring framework rather well, I became really good with the Angular framework. I shipped out a front end all by myself and worked with my mentor to hook it up to the server in which they implemented. It was team work at it's finest. The confidence issues were gone, and I really felt like I had hit my stride. I stopped valuing myself so low compared to others and going to work became a pleasure, not a stressful experience.</p><h1>The Present</h1><p>I was laid off in May 2020, due to the Coronavirus situation. I have begun my job search again and this time around I feel confident and ready to move on to the next step in my career. I know this layoff was not performance related, but just the natural ebb and flow of a company through the easy times and the hard times. The best thing one could do is to not take these layoffs personally, think of them as a stair case to the next opportunity. Just a week later after being laid off, I am prepared to get back out there. As I look back to my first job, I made so many good friends and unforgettable experiences. I will never burn these bridges as long as I live. My team members will always be a part of my family, we have all been there for each other and I know that won't change.</p><h1>The Big Picture</h1><p>I want to end this blog post with a small list of things we should all do as members of the IT industry.</p><ol><li>Never EVER undervalue yourself. You are here because you worked for it.</li></ol><ol start="2"><li>Pay it forward. Help others who need help and they will come through for you as well.</li></ol><ol start="3"><li>Continue to make and KEEP connections. You might never know what could happen, it helped to land my first job.</li></ol><ol start="4"><li>Keep learning, the second you stop learning, consider it time to move on to the next opportunity.</li></ol><ol start="5"><li>Seek discomfort. You will only improve and shine when you are out of your comfort zone.</li></ol><p>If you made it this far, I thank you for hearing me out, I hope you got some value out of this post. Until then...</p><p>-Alberto Jesus Camacho</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.acamacho.dev/posts/2020-05-25-publish</guid><title>Using Publish to Build Your Own Blog Website (Series)</title><description>Using Publish to Build Your Own Blog Website</description><link>https://www.acamacho.dev/posts/2020-05-25-publish</link><pubDate>Mon, 25 May 2020 18:00:00 -0400</pubDate><content:encoded><![CDATA[<h1>Using Publish to Build Your Own Blog Website (Series)</h1><p>So as you may know, I have been in the software industry for about three years now and I have gotten a lot of experience with different technologies. Most of them being for web development and back end servers. Being proficient in JavaScript and Java has been a by product of that time in the field.</p><p>Things can get tiresome when you are using the same language over and over again and I was wondering if there was something else out there I can take up as a hobby while my work provided me the usual features. My friend Gio Noa pointed me to John Sundell's Publish framework which was open sourced late last year.</p><p>Publish uses Swift for website development, which was very surprising to me as almost everything I've seen in web has been JavaScript or PHP. I decided to take a look and see what the fuss was about. I was pleasantly surprised. This is something anyone familiar with Swift, CSS, and HTML can do. This website you're currently on was made with Publish!</p><p>This post will take you through the installation of Publish and show you how to get a local server running. Consider this post as a series which will get you closer and closer to getting a functional blogging website.</p><h1>Installing Publish</h1><p>Installing Publish is an easy affair on the command line. Here are the steps to do so:</p><pre><code>$ git clone https://github.<span class="property">com</span>/<span class="type">JohnSundell</span>/<span class="type">Publish</span>.<span class="property">git</span>
$ cd <span class="type">Publish</span>
$ make
</code></pre><p>These three commands will install Publish into your <code>/usr/local/bin</code> directory.</p><p>Run these next commands (Do not do this in the Publish directory) to create a new Publish project:</p><pre><code>$ mkdir <span class="type">MyWebsite</span>
$ cd <span class="type">MyWebsite</span>
$ publish new
</code></pre><p>This will produce a Publish project which will do the basic scaffolding of your website. MyWebsite can be a name you choose. Do NOT use Site or Website as these are types used in Publish.</p><p>Let's take a look at our new website! It can be done with the following command;</p><pre><code>$ publish run
</code></pre><p>You get a local server running on localhost:8000, open up your browser for choice and enter localhost:8080 into your URL bar.</p><p>You should have a basic website in a dark mode theme. Your new website is up and running! The next blog post will discuss the scaffolding of this new website.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.acamacho.dev/posts/2020-02-11-ui-kit</guid><title>Learn how to quickly configure programmatic UIKit in XCode 11</title><description>How to setup Programmatic UI in XCode 11</description><link>https://www.acamacho.dev/posts/2020-02-11-ui-kit</link><pubDate>Sat, 1 Feb 2020 00:48:00 -0500</pubDate><content:encoded><![CDATA[<h1>Learn how to quickly configure programmatic UIKit in XCode 11</h1><p>As a beginner iOS developer, I wanted to learn how to do programmatic UIKit since it would help understand Apple's framework at a deeper level. One of my friends told me once I learned programmatic UIKit, Storyboards would come very easy to me.</p><p>But late last year, Storyboard projects now have a SceneDelegate and an AppDelegate. I had no idea what any of these meant and I was used to the AppDelegate class from previous versions of Xcode. I did some digging since I started a new project with Xcode 11 and I had deadlines to deal with. This is what I found.</p><p>Storyboard projects now have a SceneDelegate responsible for what is on the screen at any given moment and an AppDelegate which takes care of the application's lifecycle hooks.</p><h1>The Project Configurations</h1><p>I am going to assume you have a new project loaded up on Xcode and selected Storyboard as the User Interface.</p><ol><li>Delete <code>Main.storyboard</code> in the project navigator.</li></ol><ol start="2"><li>Go to the general settings of your app in the Deployment Info section, clear out the text in the Main Interface. The text should contain 'Main'.</li></ol><ol start="3"><li>Go to <code>info.plist</code> and search for the property called Storyboard Name which should also contain the text 'Main'. Press the minus sign next to the property name and that will remove the reference to <code>Main.storyboard</code> that we deleted in step 1.</li></ol><p>With that, we are done with project configurations. Time to move to our code changes.</p><h1>The Code Configuration</h1><p>Let's take a look at the following code snippet located in <code>SceneDelegate.swift</code>. This is where we will be hooking up our custom <code>RootController</code>.</p><pre><code><span class="keyword">func</span> scene(<span class="keyword">_</span> scene: <span class="type">UIScene</span>, willConnectTo session: <span class="type">UISceneSession</span>, options connectionOptions: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) {
    <span class="comment">// Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
    // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
    // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).</span>
    <span class="keyword">guard let</span> _ = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
}
</code></pre><p>The comments inside this code block gives us some nice direction.</p><ol><li>Remove the contents of <code>scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> .</li></ol><ol start="2"><li>Paste the following code:</li></ol><pre><code><span class="keyword">guard let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
window = <span class="type">UIWindow</span>(frame: windowScene.<span class="property">coordinateSpace</span>.<span class="property">bounds</span>)
window?.<span class="property">windowScene</span> = windowScene
window?.<span class="property">rootViewController</span> = <span class="type">ViewController</span>()
window?.<span class="call">makeKeyAndVisible</span>()
</code></pre><p>Where <code>ViewController()</code> is an instance of your ViewController class included in the project.</p><h1>Testing</h1><p>To finally verify that our changes were successful we can change the background color of the <code>ViewController</code> :</p><pre><code><span class="keyword">override func</span> viewDidLoad() {
   <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
   <span class="comment">// Do any additional setup after loading the view.</span>
   view.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemBlue</span>
}
</code></pre><p>Upon running the app we should see a blank view with a blue color.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.acamacho.dev/posts/2020-02-13-ui-kit%20copy%202</guid><title>Build a Responsive Backend Service for Multiple Users</title><description>How to setup Programmatic UI in XCode 11</description><link>https://www.acamacho.dev/posts/2020-02-13-ui-kit%20copy%202</link><pubDate>Sat, 1 Feb 2020 00:48:00 -0500</pubDate><content:encoded><![CDATA[<h1>Build a Responsive Backend Service for Multiple Users</h1><p>As a beginner iOS developer, I wanted to learn how to do programmatic UIKit since it would help understand Apple's framework at a deeper level. One of my friends told me once I learned programmatic UIKit, Storyboards would come very easy to me.</p><p>But late last year, Storyboard projects now have a SceneDelegate and an AppDelegate. I had no idea what any of these meant and I was used to the AppDelegate class from previous versions of Xcode. I did some digging since I started a new project with Xcode 11 and I had deadlines to deal with. This is what I found.</p><p>Storyboard projects now have a SceneDelegate responsible for what is on the screen at any given moment and an AppDelegate which takes care of the application's lifecycle hooks.</p><h1>The Project Configurations</h1><p>I am going to assume you have a new project loaded up on Xcode and selected Storyboard as the User Interface.</p><ol><li>Delete <code>Main.storyboard</code> in the project navigator.</li></ol><ol start="2"><li>Go to the general settings of your app in the Deployment Info section, clear out the text in the Main Interface. The text should contain 'Main'.</li></ol><ol start="3"><li>Go to <code>info.plist</code> and search for the property called Storyboard Name which should also contain the text 'Main'. Press the minus sign next to the property name and that will remove the reference to <code>Main.storyboard</code> that we deleted in step 1.</li></ol><p>With that, we are done with project configurations. Time to move to our code changes.</p><h1>The Code Configuration</h1><p>Let's take a look at the following code snippet located in <code>SceneDelegate.swift</code>. This is where we will be hooking up our custom <code>RootController</code>.</p><pre><code><span class="keyword">func</span> scene(<span class="keyword">_</span> scene: <span class="type">UIScene</span>, willConnectTo session: <span class="type">UISceneSession</span>, options connectionOptions: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) {
    <span class="comment">// Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
    // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
    // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).</span>
    <span class="keyword">guard let</span> _ = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
}
</code></pre><p>The comments inside this code block gives us some nice direction.</p><ol><li>Remove the contents of <code>scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> .</li></ol><ol start="2"><li>Paste the following code:</li></ol><pre><code><span class="keyword">guard let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
window = <span class="type">UIWindow</span>(frame: windowScene.<span class="property">coordinateSpace</span>.<span class="property">bounds</span>)
window?.<span class="property">windowScene</span> = windowScene
window?.<span class="property">rootViewController</span> = <span class="type">ViewController</span>()
window?.<span class="call">makeKeyAndVisible</span>()
</code></pre><p>Where <code>ViewController()</code> is an instance of your ViewController class included in the project.</p><h1>Testing</h1><p>To finally verify that our changes were successful we can change the background color of the <code>ViewController</code> :</p><pre><code><span class="keyword">override func</span> viewDidLoad() {
   <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
   <span class="comment">// Do any additional setup after loading the view.</span>
   view.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemBlue</span>
}
</code></pre><p>Upon running the app we should see a blank view with a blue color.</p><p>[Photos will be added soon]</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.acamacho.dev/posts/File</guid><title>Swift Miami</title><description>Welcome to Swift Miami</description><link>https://www.acamacho.dev/posts/File</link><pubDate>Sat, 1 Feb 2020 00:48:00 -0500</pubDate><content:encoded><![CDATA[<h1>Swift Miami</h1>]]></content:encoded></item></channel></rss>